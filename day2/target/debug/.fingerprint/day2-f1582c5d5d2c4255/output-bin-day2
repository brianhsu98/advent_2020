{"message":"unresolved import `anyhow`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":4,"byte_end":10,"line_start":1,"line_end":1,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use anyhow::{Error, Result};","highlight_start":5,"highlight_end":11}],"label":"use of undeclared crate or module `anyhow`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `anyhow`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse anyhow::{Error, Result};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `anyhow`\u001b[0m\n\n"}
{"message":"no method named `split` found for struct `std::str::Split<'_, &str>` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":367,"byte_end":372,"line_start":15,"line_end":15,"column_start":16,"column_end":21,"is_primary":true,"text":[{"text":"        bounds.split(\"-\");","highlight_start":16,"highlight_end":21}],"label":"method not found in `std::str::Split<'_, &str>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\brian\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib/rustlib/src/rust\\library\\core\\src\\str\\iter.rs","byte_start":11797,"byte_end":11884,"line_start":413,"line_end":413,"column_start":9,"column_end":96,"is_primary":false,"text":[{"text":"        pub struct $forward_iterator<'a, P: Pattern<'a>>(pub(super) $internal_iterator<'a, P>);","highlight_start":9,"highlight_end":96}],"label":"doesn't satisfy `std::str::Split<'_, &str>: BufRead`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\brian\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib/rustlib/src/rust\\library\\core\\src\\str\\iter.rs","byte_start":21015,"byte_end":21458,"line_start":695,"line_end":711,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"generate_pattern_iterators! {","highlight_start":1,"highlight_end":30},{"text":"    forward:","highlight_start":1,"highlight_end":13},{"text":"        /// Created with the method [`split`].","highlight_start":1,"highlight_end":47},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// [`split`]: str::split","highlight_start":1,"highlight_end":34},{"text":"        struct Split;","highlight_start":1,"highlight_end":22},{"text":"    reverse:","highlight_start":1,"highlight_end":13},{"text":"        /// Created with the method [`rsplit`].","highlight_start":1,"highlight_end":48},{"text":"        ///","highlight_start":1,"highlight_end":12},{"text":"        /// [`rsplit`]: str::rsplit","highlight_start":1,"highlight_end":36},{"text":"        struct RSplit;","highlight_start":1,"highlight_end":23},{"text":"    stability:","highlight_start":1,"highlight_end":15},{"text":"        #[stable(feature = \"rust1\", since = \"1.0.0\")]","highlight_start":1,"highlight_end":54},{"text":"    internal:","highlight_start":1,"highlight_end":14},{"text":"        SplitInternal yielding (&'a str);","highlight_start":1,"highlight_end":42},{"text":"    delegate double ended;","highlight_start":1,"highlight_end":27},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"generate_pattern_iterators!","def_site_span":{"file_name":"C:\\Users\\brian\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib/rustlib/src/rust\\library\\core\\src\\str\\iter.rs","byte_start":11007,"byte_end":15712,"line_start":388,"line_end":531,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! generate_pattern_iterators {","highlight_start":1,"highlight_end":42},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        // Forward iterator","highlight_start":1,"highlight_end":28},{"text":"        forward:","highlight_start":1,"highlight_end":17},{"text":"            $(#[$forward_iterator_attribute:meta])*","highlight_start":1,"highlight_end":52},{"text":"            struct $forward_iterator:ident;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Reverse iterator","highlight_start":1,"highlight_end":28},{"text":"        reverse:","highlight_start":1,"highlight_end":17},{"text":"            $(#[$reverse_iterator_attribute:meta])*","highlight_start":1,"highlight_end":52},{"text":"            struct $reverse_iterator:ident;","highlight_start":1,"highlight_end":44},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Stability of all generated items","highlight_start":1,"highlight_end":44},{"text":"        stability:","highlight_start":1,"highlight_end":19},{"text":"            $(#[$common_stability_attribute:meta])*","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Internal almost-iterator that is being delegated to","highlight_start":1,"highlight_end":63},{"text":"        internal:","highlight_start":1,"highlight_end":18},{"text":"            $internal_iterator:ident yielding ($iterty:ty);","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Kind of delegation - either single ended or double ended","highlight_start":1,"highlight_end":68},{"text":"        delegate $($t:tt)*","highlight_start":1,"highlight_end":27},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$forward_iterator_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        pub struct $forward_iterator<'a, P: Pattern<'a>>(pub(super) $internal_iterator<'a, P>);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        impl<'a, P> fmt::Debug for $forward_iterator<'a, P>","highlight_start":1,"highlight_end":60},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            P: Pattern<'a, Searcher: fmt::Debug>,","highlight_start":1,"highlight_end":50},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {","highlight_start":1,"highlight_end":71},{"text":"                f.debug_tuple(stringify!($forward_iterator))","highlight_start":1,"highlight_end":61},{"text":"                    .field(&self.0)","highlight_start":1,"highlight_end":36},{"text":"                    .finish()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        impl<'a, P: Pattern<'a>> Iterator for $forward_iterator<'a, P> {","highlight_start":1,"highlight_end":73},{"text":"            type Item = $iterty;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn next(&mut self) -> Option<$iterty> {","highlight_start":1,"highlight_end":52},{"text":"                self.0.next()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        impl<'a, P> Clone for $forward_iterator<'a, P>","highlight_start":1,"highlight_end":55},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            P: Pattern<'a, Searcher: Clone>,","highlight_start":1,"highlight_end":45},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn clone(&self) -> Self {","highlight_start":1,"highlight_end":38},{"text":"                $forward_iterator(self.0.clone())","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(#[$reverse_iterator_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        pub struct $reverse_iterator<'a, P: Pattern<'a>>(pub(super) $internal_iterator<'a, P>);","highlight_start":1,"highlight_end":96},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        impl<'a, P> fmt::Debug for $reverse_iterator<'a, P>","highlight_start":1,"highlight_end":60},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            P: Pattern<'a, Searcher: fmt::Debug>,","highlight_start":1,"highlight_end":50},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {","highlight_start":1,"highlight_end":71},{"text":"                f.debug_tuple(stringify!($reverse_iterator))","highlight_start":1,"highlight_end":61},{"text":"                    .field(&self.0)","highlight_start":1,"highlight_end":36},{"text":"                    .finish()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        impl<'a, P> Iterator for $reverse_iterator<'a, P>","highlight_start":1,"highlight_end":58},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            P: Pattern<'a, Searcher: ReverseSearcher<'a>>,","highlight_start":1,"highlight_end":59},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            type Item = $iterty;","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn next(&mut self) -> Option<$iterty> {","highlight_start":1,"highlight_end":52},{"text":"                self.0.next_back()","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        impl<'a, P> Clone for $reverse_iterator<'a, P>","highlight_start":1,"highlight_end":55},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            P: Pattern<'a, Searcher: Clone>,","highlight_start":1,"highlight_end":45},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn clone(&self) -> Self {","highlight_start":1,"highlight_end":38},{"text":"                $reverse_iterator(self.0.clone())","highlight_start":1,"highlight_end":50},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[stable(feature = \"fused\", since = \"1.26.0\")]","highlight_start":1,"highlight_end":55},{"text":"        impl<'a, P: Pattern<'a>> FusedIterator for $forward_iterator<'a, P> {}","highlight_start":1,"highlight_end":79},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[stable(feature = \"fused\", since = \"1.26.0\")]","highlight_start":1,"highlight_end":55},{"text":"        impl<'a, P> FusedIterator for $reverse_iterator<'a, P>","highlight_start":1,"highlight_end":63},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            P: Pattern<'a, Searcher: ReverseSearcher<'a>>,","highlight_start":1,"highlight_end":59},{"text":"        {}","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        generate_pattern_iterators!($($t)* with $(#[$common_stability_attribute])*,","highlight_start":1,"highlight_end":84},{"text":"                                                $forward_iterator,","highlight_start":1,"highlight_end":67},{"text":"                                                $reverse_iterator, $iterty);","highlight_start":1,"highlight_end":77},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        double ended; with $(#[$common_stability_attribute:meta])*,","highlight_start":1,"highlight_end":68},{"text":"                           $forward_iterator:ident,","highlight_start":1,"highlight_end":52},{"text":"                           $reverse_iterator:ident, $iterty:ty","highlight_start":1,"highlight_end":63},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        impl<'a, P> DoubleEndedIterator for $forward_iterator<'a, P>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,","highlight_start":1,"highlight_end":63},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn next_back(&mut self) -> Option<$iterty> {","highlight_start":1,"highlight_end":57},{"text":"                self.0.next_back()","highlight_start":1,"highlight_end":35},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(#[$common_stability_attribute])*","highlight_start":1,"highlight_end":43},{"text":"        impl<'a, P> DoubleEndedIterator for $reverse_iterator<'a, P>","highlight_start":1,"highlight_end":69},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,","highlight_start":1,"highlight_end":63},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            #[inline]","highlight_start":1,"highlight_end":22},{"text":"            fn next_back(&mut self) -> Option<$iterty> {","highlight_start":1,"highlight_end":57},{"text":"                self.0.next()","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        single ended; with $(#[$common_stability_attribute:meta])*,","highlight_start":1,"highlight_end":68},{"text":"                           $forward_iterator:ident,","highlight_start":1,"highlight_end":52},{"text":"                           $reverse_iterator:ident, $iterty:ty","highlight_start":1,"highlight_end":63},{"text":"    } => {}","highlight_start":1,"highlight_end":12},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the method `split` exists but the following trait bounds were not satisfied:\n`std::str::Split<'_, &str>: BufRead`\nwhich is required by `&mut std::str::Split<'_, &str>: BufRead`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `split` found for struct `std::str::Split<'_, &str>` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:15:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        bounds.split(\"-\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `std::str::Split<'_, &str>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\brian\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\lib/rustlib/src/rust\\library\\core\\src\\str\\iter.rs:695:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m695\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgenerate_pattern_iterators! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    forward:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m697\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /// Created with the method [`split`].\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m698\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m710\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    delegate double ended;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m711\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mdoesn't satisfy `std::str::Split<'_, &str>: BufRead`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the method `split` exists but the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m            `std::str::Split<'_, &str>: BufRead`\u001b[0m\n\u001b[0m            which is required by `&mut std::str::Split<'_, &str>: BufRead`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code example:\n\n```compile_fail,E0308\nlet x: i32 = \"I am not a number!\";\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n//      |             |\n//      |    initializing expression;\n//      |    compiler infers type `&str`\n//      |\n//    type `i32` assigned to variable `x`\n```\n\nThis error occurs when the compiler is unable to infer the concrete type of a\nvariable. It can occur in several cases, the most common being a mismatch\nbetween two types: the type the author explicitly assigned, and the type the\ncompiler inferred.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":960,"byte_end":977,"line_start":37,"line_end":37,"column_start":39,"column_end":56,"is_primary":true,"text":[{"text":"    let constraint = Constraint::from(constraint_string);","highlight_start":39,"highlight_end":56}],"label":"expected struct `Constraint`, found struct `Vec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `Constraint`\n   found struct `Vec<&str>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:37:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let constraint = Constraint::from(constraint_string);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected struct `Constraint`, found struct `Vec`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1mConstraint\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found struct `\u001b[0m\u001b[0m\u001b[1mVec<&str>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0432, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0308, E0432, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
